The project rooted in this directory is an Apache server instance
which can be run alongside a system's regular Apache web server. The
purpose is to create a server-client interface for local programs that
need to access the local filesystem, but for security reasons do not
want the regular Apache user to be able to write.

This separate Apache instance, then, can be run on its own private
port, as a regular user. The port may be controlled at the firewall
level so that it is inaccessible from the outside.

The point is to emulate the REST API exposed by systems like Amazon's
S3 service to serialize files to the filesystem.

-------
Reasons
-------

This may seem like an unnecessary work-around to write to the local
filesystem. The "normal" course of action would be:


     +-------------+         +-------------+         +------------+
     |             |   --->  |    PHP      | ----->  |            |
     |  Web user   |         |  script     |         | Filesystem |
     +-------------+         +-------------+         +------------+
                               Reg. Apache

The problem with this approach is that the system user that writes to
the filesystem is the same as the user running the Apache process,
usually httpd, or www-data. Opening regular filesystem files to be
writeable by the Apache user exposes the system to external attacks
that can litter the filesystem with rogue files and potentially bring
down the system itself. For this reason, it is very poor practice to
allow the Apache user to directly write to the filesystem.

Taking a queue from the Amazon S3 REST service, this project aims to
provide a server-client method by which the "PHP script" above can
request serializing a file from a local-running REST service. This
local system is not exposed to external attack, and can be run as a
local user, with strict access control.

The diagram now looks like this:


     +-------------+         +-------------+         +------------+
     |             |   --->  |    PHP      |         |            |
     |  Web user   |         |  script     |         | Filesystem |
     +-------------+         +-------------+         +------------+
                               Reg. Apache                 ^
                                                           |
                                     |               +------------+
                                     |               |    PHP     |
                                     \------------>  |  script    |
                                                     +------------+
                                                       User Apache


The extra layer adds, of course, some latency, but it is on the same
order (yet much faster) than syncing to an external system like S3. In
addition, the new methodology may allow the user to reuse code from
one system to another, and to separate the intent of serializing from
the process itself.
